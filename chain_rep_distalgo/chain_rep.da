import sys
import json
import pickle
import re

FLAGS = re.VERBOSE | re.MULTILINE | re.DOTALL
WHITESPACE = re.compile(r'[ \t\n\r]*', FLAGS)

# JSON decoder class for reading and parsing json objects from file
class ConcatJSONDecoder(json.JSONDecoder):
    def decode(self, s, _w=WHITESPACE.match):
        s_len = len(s)

        objs = []
        end = 0
        while end != s_len:
            obj, end = self.raw_decode(s, idx=_w(s, end).end())
            end = _w(s, end).end()
            objs.append(obj)
        
        return objs

# Server class for handling requests from client
class Server(process):
    def setup(total_pings, serverId):
        self.accDetails = {}

    def main():
        await(len(listof(p, received(('Query',req), from_=p))) == total_pings)

    def receive(msg=('Query', req), from_=p):
        output(json.dumps(req))
        output("Received request: " + str(req['reqId']) + " from client: " + str(req['clientId']))
        num = req['accNum']
        res = {}
        res['reqId'] = req['reqId']
        res['outcome'] = 'Processed'
        if num in accDetails:
            res['currBal'] = accDetails[num]
        else:
            output("Account does not exists. Creating new account")
            accDetails[num] = 0
            res['currBal'] = 0
        
        send(('Response',res), to=p)

    def receive(msg=('Update', req), from_=p):
        output(json.dumps(req))
        output("Received request: " + str(req['reqId']) + " from client: " + str(req['clientId']))
        num = req['accNum']
        amt = req['amount']
        res = {}
        res['reqId'] = req['reqId']
        if num in accDetails:
            bal = accDetails[num]
            if req['opr'] == 'Deposit':
                accDetails[num] = bal + amt
                output("Updating the bal: " + str(bal + num))
                res['outcome'] = 'Processed'
            elif req['opr'] == 'Withdraw':
                if(bal < amt):
                    output("Not sufficient balance")
                    res['outcome'] = 'InsufficientBalance'
                else:
                    accDetails[num] = bal - amt
                    res['outcome'] = 'Processed'
        else:
            output("Account does not exists. Creating new account")
            accDetails[num] =  amt
            res['outcome'] = 'Processed'
        
        res['currBal'] = accDetails[num]
        send(('Response',res), to=p)
        

# Client class for performing operations on server
class Client(process):
    def setup(p, nrounds): pass

    def main():
        for i in range(nrounds):
            clk = logical_clock()
            # req = { "reqId" : 1, "opr" : "Bal", "clientId" : 100, "accNum" : 1000 }    
            req = { "reqId" : 1, "opr" : "Deposit", "clientId" : 100, "accNum" : 1000, "amount" : 100 } 
            output("Sending request to server")
            # send(('Query',req), to=p)
            send(('Update',req), to=p)
            await(some(received(('Pong',), clk=rclk), has=(rclk > clk)))

    def receive(msg=('Response',res)):
        output("Received response from server for request: " + str(res['reqId']))
        output("Current Balance: " + str(res['currBal']))

    
def main():
    config(clock='Lamport')
    payload = open('/home/ppandey/async/cse535/chain_rep_distalgo/payload.json')
    data = json.load(payload, cls=ConcatJSONDecoder)      

    server = new(Server, [1, 1], num= 1)
    client = new(Client, [server, 1], num= 1)
    start(server)
    start(client)
