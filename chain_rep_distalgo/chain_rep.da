import sys
import json
import pickle
import re

FLAGS = re.VERBOSE | re.MULTILINE | re.DOTALL
WHITESPACE = re.compile(r'[ \t\n\r]*', FLAGS)

# JSON decoder class for reading and parsing json objects from file
class ConcatJSONDecoder(json.JSONDecoder):
    def decode(self, s, _w=WHITESPACE.match):
        s_len = len(s)

        objs = []
        end = 0
        while end != s_len:
            obj, end = self.raw_decode(s, idx=_w(s, end).end())
            end = _w(s, end).end()
            objs.append(obj)
        
        return objs


# Server class for handling requests from client
class Server(process):
    def setup(config, succ, pred):
        self.accDetails = {}

    def main():
        await(False)

    def receive(msg=('Query', req), from_=p):
        output(json.dumps(req))
        output("Received request: " + str(req['reqId']) + " from client: " + str(req['clientId']))
        num = req['accNum']
        res = {}
        res['reqId'] = req['reqId']
        res['outcome'] = 'Processed'
        if num in accDetails:
            res['currBal'] = accDetails[num]
        else:
            output("Account does not exists. Creating new account")
            accDetails[num] = 0
            res['currBal'] = 0
        send(('Response',res), to=p)

    def receive(msg=('Update', req), from_=p):
        output(json.dumps(req))
        output("Received request: " + str(req['reqId']) + " from client: " + str(req['clientId']))
        num = req['accNum']
        amt = req['amount']
        res = {}
        res['reqId'] = req['reqId']
        if num in accDetails:
            bal = accDetails[num]
            if req['operation'] == 1:
                accDetails[num] = bal + amt
                output("Updating the bal: " + str(bal + num))
                res['outcome'] = 'Processed'
            elif req['operation'] == 2:
                if(bal < amt):
                    output("Not sufficient balance")
                    res['outcome'] = 'InsufficientBalance'
                else:
                    accDetails[num] = bal - amt
                    res['outcome'] = 'Processed'
        else:
            output("Account does not exists. Creating new account")
            accDetails[num] =  amt
            res['outcome'] = 'Processed'
        res['currBal'] = accDetails[num]
        send(('Response',res), to=p)


# Client class for performing operations on server
class Client(process):
    def setup(servers, config, data):
        self.lastRecv = 0
        self.bankServerMap = {}

    def prepareBankServerMap():
       for c in config:
           for bank in c['bank']:
               id = bank['bankId']
               server = {}
               server['headServer'] = bank['headServer'] 
               server['tailServer'] = bank['tailServer']
               bankServerMap[id] = server

    def main():
        for d in data:
            for item in d['data']:
                clientId = item['clientId']
                for payload in item['payloads']:
                    # output("payload: " + json.dumps(payload['payload']))
                    req = payload['payload']
                    req['clientId'] = clientId
                    reqId = req['reqId']
                    type = ''
                    if req['operation'] == 0:
                        type = 'Query'
                    else:
                        type = 'Update'
                    clk = logical_clock()
                    await(lastRecv == (reqId - 1))
                    output("Sending request to server: " + str(req['reqId']))
                    send((type, req), to=p)

        await(False)

    def receive(msg=('Response', res)):
        output("Received response from server for request: " + str(res['reqId']))
        output("Current Balance: " + str(res['currBal'])) 
        lastRecv = res['reqId']

def loadConfig(config):
    count = {}
    servers = 0
    for c in config:
        for bank in c['bank']:
            servers += len(bank['servers'])
        count['total_servers'] = servers
        count['total_clients'] = len(c['client'])
    print(json.dumps(count))
    return count

def main():
    config(clock='Lamport')
    dataFile = open('/home/ppandey/async/cse535/chain_rep_distalgo/payload.json')
    data = json.load(dataFile, cls=ConcatJSONDecoder)
    cfgFile = open('/home/ppandey/async/cse535/chain_rep_distalgo/config.json')
    config = json.load(cfgFile, cls=ConcatJSONDecoder)
    
    count = loadConfig(config)
    
    servers = new(Server, num = count['total_servers'])
    clients = new(Client, num = count['total_clients'])

    
    clientMap = []
    for c in config:
        for client in c['client']:
            clientMap.append(client)

    serverMap = []
    for c in config:
        for bank in c['bank']:
            for s in bank['servers']:
                conf = {}
                conf['bankId'] = bank['bankId']
                conf['type'] = s['type']
                conf['serverId'] = s['serverId']
                serverMap.append(conf)
    
    i = 0
    serList = list(servers)
    for process, config in zip(serList, serverMap):
        if config['type'] == 0:
            setup({process}, (config, None, serList[i+1]))
        elif config['type'] == 2:
            setup({process}, (config, serList[i-1], None))
        else:
            setup({process}, (config, serList[i-1], serList[i+1]))
        i += 1

    cltList = list(clients)
    for process, config in zip(cltList, clientMap):
        setup({process}, (servers, config, data))

    #start(server)
    #start(client)

